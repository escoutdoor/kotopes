// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: favorite.proto

package favorite_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Favorite with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Favorite) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Favorite with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FavoriteMultiError, or nil
// if none found.
func (m *Favorite) ValidateAll() error {
	return m.validate(true)
}

func (m *Favorite) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for PetId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FavoriteValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FavoriteValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FavoriteValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FavoriteMultiError(errors)
	}

	return nil
}

// FavoriteMultiError is an error wrapping multiple validation errors returned
// by Favorite.ValidateAll() if the designated constraints aren't met.
type FavoriteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FavoriteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FavoriteMultiError) AllErrors() []error { return m }

// FavoriteValidationError is the validation error returned by
// Favorite.Validate if the designated constraints aren't met.
type FavoriteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FavoriteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FavoriteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FavoriteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FavoriteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FavoriteValidationError) ErrorName() string { return "FavoriteValidationError" }

// Error satisfies the builtin error interface
func (e FavoriteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFavorite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FavoriteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FavoriteValidationError{}

// Validate checks the field values on CreateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRequestMultiError, or
// nil if none found.
func (m *CreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PetId

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateRequestMultiError(errors)
	}

	return nil
}

// CreateRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestMultiError) AllErrors() []error { return m }

// CreateRequestValidationError is the validation error returned by
// CreateRequest.Validate if the designated constraints aren't met.
type CreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestValidationError) ErrorName() string { return "CreateRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestValidationError{}

// Validate checks the field values on CreateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateResponseMultiError,
// or nil if none found.
func (m *CreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateResponseMultiError(errors)
	}

	return nil
}

// CreateResponseMultiError is an error wrapping multiple validation errors
// returned by CreateResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResponseMultiError) AllErrors() []error { return m }

// CreateResponseValidationError is the validation error returned by
// CreateResponse.Validate if the designated constraints aren't met.
type CreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResponseValidationError) ErrorName() string { return "CreateResponseValidationError" }

// Error satisfies the builtin error interface
func (e CreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FavoriteId

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on ListFavoritesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFavoritesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFavoritesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFavoritesRequestMultiError, or nil if none found.
func (m *ListFavoritesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFavoritesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListFavoritesRequestMultiError(errors)
	}

	return nil
}

// ListFavoritesRequestMultiError is an error wrapping multiple validation
// errors returned by ListFavoritesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListFavoritesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFavoritesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFavoritesRequestMultiError) AllErrors() []error { return m }

// ListFavoritesRequestValidationError is the validation error returned by
// ListFavoritesRequest.Validate if the designated constraints aren't met.
type ListFavoritesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFavoritesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFavoritesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFavoritesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFavoritesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFavoritesRequestValidationError) ErrorName() string {
	return "ListFavoritesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFavoritesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFavoritesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFavoritesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFavoritesRequestValidationError{}

// Validate checks the field values on ListFavoritesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFavoritesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFavoritesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFavoritesResponseMultiError, or nil if none found.
func (m *ListFavoritesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFavoritesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFavorites() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFavoritesResponseValidationError{
						field:  fmt.Sprintf("Favorites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFavoritesResponseValidationError{
						field:  fmt.Sprintf("Favorites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFavoritesResponseValidationError{
					field:  fmt.Sprintf("Favorites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListFavoritesResponseMultiError(errors)
	}

	return nil
}

// ListFavoritesResponseMultiError is an error wrapping multiple validation
// errors returned by ListFavoritesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListFavoritesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFavoritesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFavoritesResponseMultiError) AllErrors() []error { return m }

// ListFavoritesResponseValidationError is the validation error returned by
// ListFavoritesResponse.Validate if the designated constraints aren't met.
type ListFavoritesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFavoritesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFavoritesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFavoritesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFavoritesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFavoritesResponseValidationError) ErrorName() string {
	return "ListFavoritesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFavoritesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFavoritesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFavoritesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFavoritesResponseValidationError{}

// Validate checks the field values on ListFavoritesResponse_FavoritePet with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListFavoritesResponse_FavoritePet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFavoritesResponse_FavoritePet
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListFavoritesResponse_FavoritePetMultiError, or nil if none found.
func (m *ListFavoritesResponse_FavoritePet) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFavoritesResponse_FavoritePet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetPet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFavoritesResponse_FavoritePetValidationError{
					field:  "Pet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFavoritesResponse_FavoritePetValidationError{
					field:  "Pet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFavoritesResponse_FavoritePetValidationError{
				field:  "Pet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFavoritesResponse_FavoritePetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFavoritesResponse_FavoritePetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFavoritesResponse_FavoritePetValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListFavoritesResponse_FavoritePetMultiError(errors)
	}

	return nil
}

// ListFavoritesResponse_FavoritePetMultiError is an error wrapping multiple
// validation errors returned by
// ListFavoritesResponse_FavoritePet.ValidateAll() if the designated
// constraints aren't met.
type ListFavoritesResponse_FavoritePetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFavoritesResponse_FavoritePetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFavoritesResponse_FavoritePetMultiError) AllErrors() []error { return m }

// ListFavoritesResponse_FavoritePetValidationError is the validation error
// returned by ListFavoritesResponse_FavoritePet.Validate if the designated
// constraints aren't met.
type ListFavoritesResponse_FavoritePetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFavoritesResponse_FavoritePetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFavoritesResponse_FavoritePetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFavoritesResponse_FavoritePetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFavoritesResponse_FavoritePetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFavoritesResponse_FavoritePetValidationError) ErrorName() string {
	return "ListFavoritesResponse_FavoritePetValidationError"
}

// Error satisfies the builtin error interface
func (e ListFavoritesResponse_FavoritePetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFavoritesResponse_FavoritePet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFavoritesResponse_FavoritePetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFavoritesResponse_FavoritePetValidationError{}
